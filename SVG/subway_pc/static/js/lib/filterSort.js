// Generated by CoffeeScript 1.10.0
(function($) {

  /***
   * author xijinling@360.cn, zhaolei@360.cn
   * rely on Zepto
   * version 2.0.1
   * 1.0.1 修复sub-menu第一次不能选中的bug
   * 1.0.2 添加getAllItems方法，获取当前最新的配置
   * 1.0.3 添加reset()方法重置初始值；添加updateHeader配置项，设置为1时自动更新头部的label
   * 1.0.4 解决某些机型下事件冒泡焦点错位的bug
   * 1.0.5 修复二级菜单点击报错的bug
   * 1.0.6 增加setHeaderDisable方法，支持将某个筛选项禁用。用法：instance.setHeaderDisable(0,1)，表示将第一个筛选项禁用
   * 1.0.7 增加useMask参数，默认为1，从弹出层中展示下拉菜单，多于6条时出显示更多按钮；
   * 1.0.8 增加打点支持。绑定menu.loaded事件，可获得当前下拉菜单dom节点；绑定submenu.changed事件，可在二级 菜单切换时获取下拉菜单dom节点。由dom节点来处理打点参数
   * 1.0.9 在原位置显示下拉菜单，并且Mask只覆盖筛选区下部分；调整了字体，间距，图标等样式；下拉菜单无选中项目时，header恢复到默认值
   * 1.1.0 bugfix: selectSort遮罩一直是定高，导致无筛选结果时，下拉列表下方有空白
   * 1.1.1 bugfix: getMask定位问题
   * 1.1.2 增加setItems方法，以方便在运行时修改items参数
   * 1.1.3 useMask为0时，也支持useMore参数
   *
   * 2.0.0 重构, 修改ui界面，移除二级菜单，移除部分原有方法，替换所有click事件
   * 2.0.1 修改滑块拖动移除其他事件代理的问题
   * *
   */

  /**
   * 替换%s输出结果
   * @param  {type} str [description]
   * @return {type}     [description]
   */
  var SelectSort, events, sprintf;
  sprintf = function(str) {
    var args, flag, i;
    args = arguments;
    flag = true;
    i = 1;
    str = str.replace(/%s/g, function() {
      var arg;
      arg = args[i++];
      if (typeof arg === 'undefined') {
        flag = false;
        return '';
      }
      return arg;
    });
    if (flag) {
      return str;
    }
    return '';
  };

  /**
   * 事件对象
   * @type {Object}
   */
  events = {

    /**
     * 事件绑定
     * @param  {String} name    绑定事件
     * @param  {Function} fn      事件函数
     * @param  {Object} context 函数上下文
     * @return {Object}         events
     */
    on: function(name, fn, context) {
      this.events = this.events || {};
      events = this.events;
      if (typeof fn === 'function') {
        events[name] = events[name] || [];
        events[name].push({
          fn: fn,
          context: context || this
        });
      }
      return this;
    },

    /**
     * 事件触发
     * @param  {String} name  事件名
     * @return {Object}       events
     */
    trigger: function(name) {
      var args;
      this.events = this.events || {};
      events = this.events;
      args = Array.prototype.slice.call(arguments);
      events[name] && events[name].forEach(function(e) {
        return e.fn.apply(e.context || this, args.slice(1));
      });
      return this;
    }
  };
  SelectSort = (function() {
    SelectSort.LAYOUT = 1;

    SelectSort.INSTANCE = null;

    SelectSort.DEFAULTS = {
      useMask: 1
    };


    /**
     * 构造函数
     * @param  {Object} opts 配置参数
     */

    function SelectSort(opts) {
      if (SelectSort.INSTANCE) {
        SelectSort.INSTANCE.removeDropdown();
      }
      SelectSort.INSTANCE = this;
      this.opts = $.extend({}, SelectSort.DEFAULTS, opts);
      this._opts = $.extend(true, {}, this.opts);
      this.$dom = this.opts.element;
      this.nav_index = 0; //二级菜选中索引
      this.list_index = 0; //列表选中索引
      if (!this.$dom) {
        throw 'SelectSort param: element missed';
      }
      this.init();
    }


    /**
     * events对象on方法
     */

    SelectSort.prototype.on = events.on;


    /**
     * events对象trigger方法
     */

    SelectSort.prototype.trigger = events.trigger;


    /**
     * 初始化函数
     */

    SelectSort.prototype.init = function() {
      this.items = this.opts.items || [];
      if (this.items.length < 1) {
        throw 'SelectSort param: items not an array';
      }
      this.initHeader();
      return this.bindEvent();
    };


    /**
     * 初始化header
     */

    SelectSort.prototype.initHeader = function() {
      var _class, _item, i, items, j, len;
      items = this.items;
      this.$dom.addClass('super_map_sort').html('');
      this.$header = $('<section class="filter-header"></section>').appendTo(this.$dom);
      for (i = j = 0, len = items.length; j < len; i = ++j) {
        _item = items[i];
        _class = $.trim([_item.active ? 'active' : '', _item.sort === 'desc' ? 'sort-desc' : '', _item.children ? 'filter-child' : '', _item.disable === 1 ? 'disable' : '', _item.sort === 'asc' ? 'sort-asc' : ''].join(' '));
        this.$header.append(["<div class=\"filter item " + _class + "\" data-index=\"" + i + "\">", "<div class=\"title\">" + (_item.newlabel || _item.label) + "</div>", "</div>"].join(''));
      }
      return true;
    };


    /**
     * 初始化列表
     * @param  {Number} index 索引
     */

    SelectSort.prototype.initMenu = function(index) {
      var hoffset, items, dropdown, sort_list, sort_sub_nav;
      items = this.items[index];
      hoffset = this.$header.offset();
      if (this.opts.useMask) {
        this.getMask().show();
      }
      this.nav_index = 0; //二级菜选中索引
      this.list_index = 0; //列表选中索引
      this.createDropDown(items);

      dropdown = this.getDropdown();
      sort_list = dropdown.find('.sort_list');
      sort_sub_nav = dropdown.find('.sort_sub_nav');

      sort_sub_nav.scrollTop(this.nav_index * 41);
      sort_list.scrollTop(this.list_index * 41);

      return dropdown.focus();
    };


    /**
     * 事件绑定
     */

    SelectSort.prototype.bindEvent = function() {
      var self;
      self = this;
      return this.$dom.off().on('tap', '.item', function(ev) {
        return self.menuToggleDisplay($(this));
      }).on('touchend', function(ev) {
        return ev.preventDefault();
      });
    };


    /**
     * 计算dom摆放位置
     * @return {Obejct} 位置宽高哈希
     */

    SelectSort.prototype.getPoi = function() {
      var _bheight, _bwidth, _top, _width, hoffset, opts;
      hoffset = this.$header.offset();
      opts = {
        top: hoffset.top + hoffset.height,
        width: hoffset.width,
        left: hoffset.left
      };
      _bwidth = $('body').width();
      _bheight = window.innerHeight;
      _width = opts.width || _bwidth;
      _top = opts.top || 0;
      return {
        position: 'absolute',
        width: _width,
        height: _bheight - _top,
        top: _top,
        left: opts.left || (_bwidth - _width) / 2
      };
    };


    /**
     * 获取遮罩层
     * @param  {Object} opts 初始化遮罩
     * @return {[type]}      [description]
     */

    SelectSort.prototype.getMask = function() {
      if (!this.$mask) {
        this.$mask = $('<div>').addClass('super_map_sort_mask').css(this.getPoi()).on('tap', (function(_this) {
          return function() {
            return _this.removeDropdown();
          };
        })(this)).on('touchend', function(ev) {
          return ev.preventDefault();
        }).appendTo('body');
      }
      return this.$mask;
    };


    /**
     * 获取下拉列表
     * @return {Obejct dom} .super_map_sort下拉列表dom对象
     */

    SelectSort.prototype.getDropdown = function() {
      var self;
      if (!this.$menu) {
        self = this;
        this.$menu = $('<div class="super_map_sort"><div class="menu flexbox clearfix"></div></div>').css(this.getPoi()).css('height', '').on('touchstart', '.item-range-min-btn', this.rangeWidgetMinEvent).on('touchstart', '.item-range-max-btn', this.rangeWidgetMaxEvent).on('tap', 'li', function(ev) {
          return self.menuItemEvent($(this));
        }).on('touchstart', function(ev) {
          //ev.preventDefault();
        }).on('touchend', function(ev) {
          ev.preventDefault();
          return $(this).off('touchmove');
        }).on('touchend', 'li', function(ev) {
          return ev.preventDefault();
        }).appendTo('body');
      }
      return this.$menu;
    };


    /**
     * 最小值滑块事件
     */

    SelectSort.prototype.rangeWidgetMinEvent = function(ev) {
      var coverDom, maxLeft, maxWidth, minLeft, minWidth, rate, screenLeft, that, touchLeft;
      ev.preventDefault();
      that = $(this).css('z-index', ++SelectSort.LAYOUT);
      coverDom = that.siblings('.item-range-cover');
      touchLeft = ev.touches[0].clientX - that.offset().left;
      screenLeft = that.parent().offset().left;
      minLeft = -10;
      maxLeft = that.siblings('.item-range-max-btn').offset().left - screenLeft;
      minWidth = 0;
      maxWidth = maxLeft + 10;
      rate = that.data('scope') / that.parent().width();
      return $('.super_map_sort').on('touchmove', function(ev) {
        var currectLeft, currectWidth;
        ev.preventDefault();
        currectLeft = ev.touches[0].clientX - screenLeft - touchLeft;
        currectWidth = maxWidth - currectLeft - 10;
        if (currectLeft > maxLeft) {
          currectLeft = maxLeft;
        } else if (currectLeft < minLeft) {
          currectLeft = minLeft;
        }
        if (currectWidth < minWidth) {
          currectWidth = minWidth;
        } else if (currectWidth > maxWidth) {
          currectWidth = maxWidth;
        }
        that.css('left', currectLeft + 'px');
        coverDom.css({
          width: currectWidth + 'px',
          left: currectLeft + 10 + 'px'
        });
        return $('.menu .item-range-min-txt').html('¥' + parseInt(rate * (currectLeft + 10)));
      });
    };


    /**
     * 最大值滑块事件
     */

    SelectSort.prototype.rangeWidgetMaxEvent = function(ev) {
      var coverDom, max, maxLeft, maxWidth, minLeft, minWidth, rate, scope, screenLeft, that, touchLeft;
      ev.preventDefault();
      that = $(this).css('z-index', ++SelectSort.LAYOUT);
      coverDom = that.siblings('.item-range-cover');
      touchLeft = ev.touches[0].clientX - that.offset().left;
      screenLeft = that.parent().offset().left;
      minLeft = that.siblings('.item-range-min-btn').offset().left - screenLeft;
      maxLeft = that.parent().width() - 10;
      minWidth = 0;
      maxWidth = maxLeft - minLeft;
      scope = that.data('scope');
      max = that.data('max');
      rate = scope / that.parent().width();
      return $('.super_map_sort').on('touchmove', function(ev) {
        var currectLeft, currectWidth, result;
        ev.preventDefault();
        currectLeft = ev.touches[0].clientX - screenLeft - touchLeft;
        currectWidth = currectLeft - minLeft;
        if (currectLeft < minLeft) {
          currectLeft = minLeft;
        } else if (currectLeft > maxLeft) {
          currectLeft = maxLeft;
        }
        if (currectWidth < minWidth) {
          currectWidth = minWidth;
        } else if (currectWidth > maxWidth) {
          currectWidth = maxWidth;
        }
        that.css('left', currectLeft + 'px');
        coverDom.css('width', currectWidth + 'px');
        result = parseInt(rate * (currectLeft + 10));
        if (!result) {
          result = 1;
        }
        return $('.menu .item-range-max-txt').html(result < scope ? "¥" + result : max);
      });
    };


    /**
     * slider数据UI修正
     * @param  {[type]} scope    [description]
     * @param  {[type]} maxScope [description]
     * @return {[type]}          [description]
     */

    SelectSort.prototype.slider = function(scope, maxScope) {
      var coverWidth, leftMaxPiont, maxWidth, rightMaxPiont;
      maxWidth = $('.item-range-bg').width();
      coverWidth = $('.item-range-cover').width();

      /**
       * 数据缺失时修正价格区间
       */
      if (!scope[0]) {
        scope[0] = maxScope[0];
      }
      if (!scope[1]) {
        scope[1] = maxScope[1];
        $('.menu .item-range-max-txt').html($('.item-range-max-btn').data('max'));
      }
      rightMaxPiont = maxWidth / maxScope[1] * scope[1];
      if (scope[1] < maxScope[1]) {
        $('.item-range-max-btn').css('left', rightMaxPiont - 10 + 'px').siblings('.item-range-cover').css('width', rightMaxPiont + 'px');
        $('.menu .item-range-max-txt').html('¥' + scope[1]);
      }
      if (scope[0] > maxScope[0]) {
        leftMaxPiont = maxWidth / maxScope[1] * scope[0];
        $('.item-range-min-btn').css('left', leftMaxPiont - 10 + 'px').siblings('.item-range-cover').css({
          width: rightMaxPiont - leftMaxPiont + 'px',
          left: leftMaxPiont + 'px'
        });
        return $('.menu .item-range-min-txt').html('¥' + scope[0]);
      }
    };


    SelectSort.prototype.createDropDownList = function(items, opts) {
      opts = opts || {};

      var _this = this,
          list = [],
          overflowHeight,
          hasWidget = false,
          noSelected = opts.noSelected || false;

      $.map(items, function(_item, index) {
          var _class = '';
          if(!_item){
            return false;
          }
          
          if ('string' === typeof _item.type && _item.type === 'button') {
            hasWidget = true;
          }
          if (!('type' in _item)) {
            _item.type = 'select';
          }

          if(_item.active){
            _this.list_index = index;
          }

          if(!noSelected){
            _class = $.trim([_item.active ? 'active' : '', _item.sort === 'desc' ? 'sort-desc' : '', _item.sort === 'asc' ? 'sort-asc' : ''].join(' '));
          }
          


          list.push(sprintf(_this.widget(_item), _class, index, _item.label));

          if (_item.type && _item.type.type === 'range') {
            //return _this.slider(_item.params.price.split(','), _item.type.scope);
          }
        });

      if (hasWidget) {
        overflowHeight = items.length * 41 + 41;
      } else {
        overflowHeight = (items.length > 6 ? 6 : items.length) * 41;
      }

      return {
        html: list.join(''),
        overflowHeight: overflowHeight
      };
    };


    /**
     * 创建下拉列表
     * @param  {Object} items 对应项数据
     * @return {[type]}       [description]
     */

    SelectSort.prototype.createDropDown = function(items) {
      var _this = this,
          $ul,
          overflowHeight,
          dropdown_con = this.getDropdown().find('.menu'),
          dropdown_str = '',
          dropdown_nav_list = [''],
          dropdown_list = [''],
          dropdown_info,
          dropdown_list_str = '',
          items_children = items.children,
          _items_children,
          nav_overflow_height = (items_children.length > 6 ? 6 : items_children.length) * 41;;


      //二级导航
      if(items_children[0].children){
        $.map(items_children, function(_item, index) {
          var _class;
          if(!_item){
            return false;
          }

          _item.type = 'nav';

          if(_item.params){
            _item.type = 'select';
          }

          if(_item.active){
            _items_children = items_children[index].children;
            _this.nav_index = index;
          }
          
          _class = $.trim([_item.active ? 'active' : '', _item.active ? 'last_active' : ''].join(' '));


          dropdown_nav_list.push(sprintf(_this.widget(_item), _class, index, _item.label));
        });
        
        items_children = _items_children;
      }      

      dropdown_info = this.createDropDownList(items_children);
      dropdown_list.push(dropdown_info.html);

      overflowHeight = Math.max(dropdown_info.overflowHeight,nav_overflow_height);
      

      if(_items_children){
        dropdown_nav_list[0] = '<ul class="dropdown sort_sub_nav" style="height:'+ overflowHeight +'px">';
        dropdown_nav_list.push('</ul>');
      }
      


      dropdown_list[0] = '<ul class="dropdown sort_list" style="height:'+ overflowHeight +'px">';
      dropdown_list.push('</ul>');



      dropdown_str = dropdown_nav_list.join('') + dropdown_list.join('');

      dropdown_con.html(dropdown_str);
    };


    /**
     * dom插件化处理
     * @param  {[type]} item [description]
     * @return {[type]}      [description]
     */

    SelectSort.prototype.widget = function(item) {
      var _type, icon, txtMap;
      icon = '';
      if ('icon' in item) {
        txtMap = {
          tuan: '团',
          sale: '惠',
          pai: '排 '
        };
        icon = "<span class=\"icon icon" + (item.icon[0].toUpperCase() + item.icon.slice(1).toLowerCase()) + "\">" + txtMap[item.icon] + "</span>&nbsp;";
      }
      _type = '[object Object]' === toString.call(item.type) ? item.type.type : item.type;
      if (_type === 'select') {
        return "<li class=\"item iconGroup item-select %s\" data-index=\"%s\">" + icon + "%s</li>";
      }
      if (_type === 'checkbox') {
        return "<li class=\"item iconGroup item-checkbox %s\" data-index=\"%s\">" + icon + "%s</li>";
      }
      if (_type === 'button') {
        return "<li class=\"item iconGroup item-button %s\" data-index=\"%s\"><span>%s</span></li>";
      }
      if (_type === 'range') {
        return "<li class=\"item iconGroup item-range %s\" data-index=\"%s\">%s" + "<div class=\"item-range-txt\">" + ("<span class=\"item-range-min-txt\">" + (+item.type.min ? '¥' + item.type.min : item.type.min) + "</span>") + ("<span class=\"item-range-max-txt\">" + (+item.type.max ? '¥' + item.type.max : item.type.max) + "</span>") + "</div>" + "<div class=\"item-range-bg\">" + "<div class=\"item-range-cover\"></div>" + ("<b class=\"item-range-min-btn\" data-max=\"" + item.type.max + "\" data-scope=\"" + item.type.scope[1] + "\"></b>") + ("<b class=\"item-range-max-btn\" data-max=\"" + item.type.max + "\" data-scope=\"" + item.type.scope[1] + "\"></b>") + "</div>" + "</li>";
      }
      if(_type === 'nav'){
        return "<li class=\"item item-nav %s\" data-index=\"%s\"><span>%s</span></li>";
      }
    };


    /**
     * 下拉列表项事件
     */

    SelectSort.prototype.menuItemEvent = function($el) {
      var filterIndex, it, item, itemIndex, items, j, k, len, maxPrice, minPrice, ref, ref1, v, sort_list, sub_list_html, dropdown_info, last_active, sort_sub_nav, dropdown, parent_con, nav_index;
      dropdown = this.getDropdown();
      sort_list = dropdown.find('.sort_list');
      sort_sub_nav = dropdown.find('.sort_sub_nav');
      last_active = $el.hasClass('last_active');
      filterIndex = $('.filter-header .active').index();
      itemIndex = $el.index();
      parent_con = $el.closest('div.menu');
      nav_index = this.nav_index;
      items = this.items[filterIndex];
      item = (!sort_sub_nav.length || $el.parent().hasClass('sort_sub_nav') && $el.hasClass('item-select')  ) ? items.children[itemIndex] : items.children[nav_index].children[itemIndex];      


      /**
       * 单选
       */
      if ($el.hasClass('item-select')) {
        $el.addClass('active').siblings().removeClass('active');
        ref = items.children;

        //重置二级菜单的选中状态;
        if(sort_sub_nav.length){
          for(j=0,len = ref.length;j<len;j++){
            it = ref[j];
            it.active = 0;
          }
          items.children[nav_index].active = 1;

          ref = items.children[nav_index].children;
        }

        for (j = 0, len = ref.length; j < len; j++) {
          it = ref[j];
          it.active = 0;
        }

        item.active = 1;
        this.$header.find('.title').eq(filterIndex).html(itemIndex === 0 ? items.label : item.label);
        this.trigger('item.click', item);
        return;
      }

      /**
       * 菜单
       */
      if($el.hasClass('item-nav')){
        dropdown_info = this.createDropDownList(items.children[itemIndex].children, {noSelected: !last_active});
        $el.addClass('active').siblings().removeClass('active');
        sub_list_html = dropdown_info.html;
        this.nav_index = itemIndex;
        
        // sort_sub_nav.css({
        //   height: dropdown_info.overflowHeight
        // });
        // sort_list.css({
        //   height: dropdown_info.overflowHeight
        // });

        sort_list.html(sub_list_html);
        sort_list.scrollTop(0);
        return; 
      }

      /**
       * 多选
       */
      if ($el.hasClass('item-checkbox')) {
        item.active = 1;
        $el.toggleClass('active');
        return;
      }

      /**
       * 确认
       */
      if ($el.hasClass('item-button')) {
        ref1 = item.params;
        for (k in ref1) {
          v = ref1[k];
          if (k === 'filter') {
            v = [];
            $('.menu .active').each(function() {
              var index;
              index = $(this).data('index');
              return v.push(items.children[index].params.filter);
            });
          }
          if (k === 'price') {
            minPrice = +$('.menu .item-range-min-txt').html().slice(1);
            maxPrice = +$('.menu .item-range-max-txt').html().slice(1);
            if (!minPrice) {
              minPrice = '';
            }
            if (!maxPrice) {
              maxPrice = '';
            }
            v = minPrice || maxPrice ? [minPrice, maxPrice] : [];
          }
          item.params[k] = v.join(',');
        }
        return this.trigger('item.click', item);
      }
    };


    /**
     * 下拉列表展示/隐藏
     * @param  {Object} $el jquery对象实例
     * @return {Boolean}    true 展开 false 隐藏
     */

    SelectSort.prototype.menuToggleDisplay = function($el) {
      if ($el.hasClass('disable')) {
        return;
      }
      if ($el.hasClass('active')) {
        return this.removeDropdown();
      } else {
        $el.addClass('active').siblings().removeClass('active');
        this.initMenu($el.data('index'));
        $('html').addClass('show-select-sort');
        return $('html, body').css({
          overflow: 'hidden',
          height: '100%'
        });
      }
    };


    /**
     * 移除menu列表和遮罩
     */

    SelectSort.prototype.removeDropdown = function() {
      $('.filter-header .active').removeClass('active');
      $('html,body').css({
        overflow: '',
        height: ''
      });
      $('html').removeClass('show-select-sort');
      if (this.$menu) {
        this.$menu.remove();
        this.$menu = null;
      }
      if (this.$mask) {
        this.$mask.remove();
        this.$mask = null;
      }
      return this;
    };

    return SelectSort;

  })();
  if (typeof define === 'function') {
    return define(function(require) {
      return SelectSort;
    });
  } else {
    return this.selectSort = SelectSort;
  }
})($);
